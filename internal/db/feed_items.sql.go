// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_items.sql

package db

import (
	"context"
	"database/sql"
)

const deleteFeedItem = `-- name: DeleteFeedItem :exec
DELETE FROM feed_items
WHERE id = ?
`

func (q *Queries) DeleteFeedItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFeedItem, id)
	return err
}

const deleteOldFeedItems = `-- name: DeleteOldFeedItems :exec
DELETE FROM feed_items
WHERE feed_id = ? AND created_at < ?
`

type DeleteOldFeedItemsParams struct {
	FeedID    int64        `json:"feed_id"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) DeleteOldFeedItems(ctx context.Context, arg DeleteOldFeedItemsParams) error {
	_, err := q.db.ExecContext(ctx, deleteOldFeedItems, arg.FeedID, arg.CreatedAt)
	return err
}

const getFeedItem = `-- name: GetFeedItem :one
SELECT id, feed_id, title, description, link, created_at, updated_at FROM feed_items
WHERE id = ? LIMIT 1
`

func (q *Queries) GetFeedItem(ctx context.Context, id int64) (FeedItem, error) {
	row := q.db.QueryRowContext(ctx, getFeedItem, id)
	var i FeedItem
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.Title,
		&i.Description,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFeedItems = `-- name: ListFeedItems :many
SELECT id, feed_id, title, description, link, created_at, updated_at FROM feed_items
WHERE feed_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListFeedItems(ctx context.Context, feedID int64) ([]FeedItem, error) {
	rows, err := q.db.QueryContext(ctx, listFeedItems, feedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedItem
	for rows.Next() {
		var i FeedItem
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.Title,
			&i.Description,
			&i.Link,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertFeedItem = `-- name: UpsertFeedItem :exec
INSERT INTO feed_items (feed_id, title, description, link, updated_at)
VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
ON CONFLICT(feed_id, link) DO UPDATE SET
    title = excluded.title,
    description = excluded.description,
    updated_at = CURRENT_TIMESTAMP
`

type UpsertFeedItemParams struct {
	FeedID      int64          `json:"feed_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Link        string         `json:"link"`
}

func (q *Queries) UpsertFeedItem(ctx context.Context, arg UpsertFeedItemParams) error {
	_, err := q.db.ExecContext(ctx, upsertFeedItem,
		arg.FeedID,
		arg.Title,
		arg.Description,
		arg.Link,
	)
	return err
}
