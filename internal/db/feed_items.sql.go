// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_items.sql

package db

import (
	"context"
	"database/sql"
)

const deleteItemsByFeedID = `-- name: DeleteItemsByFeedID :exec
DELETE FROM feed_items
WHERE feed_id = ?
`

func (q *Queries) DeleteItemsByFeedID(ctx context.Context, feedID int64) error {
	_, err := q.db.ExecContext(ctx, deleteItemsByFeedID, feedID)
	return err
}

const getFeedItem = `-- name: GetFeedItem :one
SELECT id, feed_id, title, description, link, created_at, updated_at, date FROM feed_items
WHERE id = ? LIMIT 1
`

func (q *Queries) GetFeedItem(ctx context.Context, id int64) (FeedItem, error) {
	row := q.db.QueryRowContext(ctx, getFeedItem, id)
	var i FeedItem
	err := row.Scan(
		&i.ID,
		&i.FeedID,
		&i.Title,
		&i.Description,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Date,
	)
	return i, err
}

const listFeedItems = `-- name: ListFeedItems :many
SELECT id, feed_id, title, description, link, created_at, updated_at, date FROM feed_items
WHERE feed_id = ?
ORDER BY COALESCE(date, created_at) DESC
`

func (q *Queries) ListFeedItems(ctx context.Context, feedID int64) ([]FeedItem, error) {
	rows, err := q.db.QueryContext(ctx, listFeedItems, feedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedItem
	for rows.Next() {
		var i FeedItem
		if err := rows.Scan(
			&i.ID,
			&i.FeedID,
			&i.Title,
			&i.Description,
			&i.Link,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertFeedItem = `-- name: UpsertFeedItem :many
INSERT INTO feed_items (feed_id, title, description, link, date, updated_at)
VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
ON CONFLICT(feed_id, link) DO NOTHING
RETURNING id
`

type UpsertFeedItemParams struct {
	FeedID      int64          `json:"feed_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Link        string         `json:"link"`
	Date        sql.NullTime   `json:"date"`
}

func (q *Queries) UpsertFeedItem(ctx context.Context, arg UpsertFeedItemParams) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, upsertFeedItem,
		arg.FeedID,
		arg.Title,
		arg.Description,
		arg.Link,
		arg.Date,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
