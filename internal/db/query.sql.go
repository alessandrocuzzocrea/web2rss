// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const getFeed = `-- name: GetFeed :one
SELECT id, name, url, item_selector, title_selector, link_selector, description_selector, created_at, updated_at FROM feeds
WHERE id = ? LIMIT 1
`

func (q *Queries) GetFeed(ctx context.Context, id int64) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.ItemSelector,
		&i.TitleSelector,
		&i.LinkSelector,
		&i.DescriptionSelector,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFirstFeed = `-- name: GetFirstFeed :one
select id, name, url, item_selector, title_selector, link_selector, description_selector, created_at, updated_at from feeds limit 1
`

func (q *Queries) GetFirstFeed(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFirstFeed)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.ItemSelector,
		&i.TitleSelector,
		&i.LinkSelector,
		&i.DescriptionSelector,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertFeedItem = `-- name: UpsertFeedItem :exec
INSERT OR REPLACE INTO feed_items (feed_id, title, description, link, updated_at)
VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
`

type UpsertFeedItemParams struct {
	FeedID      int64
	Title       string
	Description sql.NullString
	Link        string
}

func (q *Queries) UpsertFeedItem(ctx context.Context, arg UpsertFeedItemParams) error {
	_, err := q.db.ExecContext(ctx, upsertFeedItem,
		arg.FeedID,
		arg.Title,
		arg.Description,
		arg.Link,
	)
	return err
}
