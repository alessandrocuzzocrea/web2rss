// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package db

import (
	"context"
	"database/sql"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (name, url, item_selector, title_selector, link_selector, description_selector)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, name, url, item_selector, title_selector, link_selector, description_selector, created_at, updated_at, last_refreshed_at
`

type CreateFeedParams struct {
	Name                string         `json:"name"`
	Url                 string         `json:"url"`
	ItemSelector        sql.NullString `json:"item_selector"`
	TitleSelector       sql.NullString `json:"title_selector"`
	LinkSelector        sql.NullString `json:"link_selector"`
	DescriptionSelector sql.NullString `json:"description_selector"`
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.Name,
		arg.Url,
		arg.ItemSelector,
		arg.TitleSelector,
		arg.LinkSelector,
		arg.DescriptionSelector,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.ItemSelector,
		&i.TitleSelector,
		&i.LinkSelector,
		&i.DescriptionSelector,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastRefreshedAt,
	)
	return i, err
}

const deleteFeed = `-- name: DeleteFeed :exec
DELETE FROM feeds
WHERE id = ?
`

func (q *Queries) DeleteFeed(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFeed, id)
	return err
}

const getFeed = `-- name: GetFeed :one
SELECT id, name, url, item_selector, title_selector, link_selector, description_selector, created_at, updated_at, last_refreshed_at FROM feeds
WHERE id = ? LIMIT 1
`

func (q *Queries) GetFeed(ctx context.Context, id int64) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.ItemSelector,
		&i.TitleSelector,
		&i.LinkSelector,
		&i.DescriptionSelector,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastRefreshedAt,
	)
	return i, err
}

const listFeeds = `-- name: ListFeeds :many
SELECT id, name, url, item_selector, title_selector, link_selector, description_selector, created_at, updated_at, last_refreshed_at FROM feeds
ORDER BY name
`

func (q *Queries) ListFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, listFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.ItemSelector,
			&i.TitleSelector,
			&i.LinkSelector,
			&i.DescriptionSelector,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastRefreshedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFeedsWithItemsCount = `-- name: ListFeedsWithItemsCount :many
SELECT f.id, f.name, f.url, f.item_selector, f.title_selector, f.link_selector, f.description_selector, f.created_at, f.updated_at, f.last_refreshed_at, COUNT(i.id) AS items_count
FROM feeds f
LEFT JOIN feed_items i ON f.id = i.feed_id
GROUP BY f.id
ORDER BY f.name
`

type ListFeedsWithItemsCountRow struct {
	ID                  int64          `json:"id"`
	Name                string         `json:"name"`
	Url                 string         `json:"url"`
	ItemSelector        sql.NullString `json:"item_selector"`
	TitleSelector       sql.NullString `json:"title_selector"`
	LinkSelector        sql.NullString `json:"link_selector"`
	DescriptionSelector sql.NullString `json:"description_selector"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
	LastRefreshedAt     sql.NullTime   `json:"last_refreshed_at"`
	ItemsCount          int64          `json:"items_count"`
}

func (q *Queries) ListFeedsWithItemsCount(ctx context.Context) ([]ListFeedsWithItemsCountRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeedsWithItemsCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedsWithItemsCountRow
	for rows.Next() {
		var i ListFeedsWithItemsCountRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.ItemSelector,
			&i.TitleSelector,
			&i.LinkSelector,
			&i.DescriptionSelector,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastRefreshedAt,
			&i.ItemsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeed = `-- name: UpdateFeed :exec
UPDATE feeds
SET name = ?, url = ?, item_selector = ?, title_selector = ?, link_selector = ?, description_selector = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateFeedParams struct {
	Name                string         `json:"name"`
	Url                 string         `json:"url"`
	ItemSelector        sql.NullString `json:"item_selector"`
	TitleSelector       sql.NullString `json:"title_selector"`
	LinkSelector        sql.NullString `json:"link_selector"`
	DescriptionSelector sql.NullString `json:"description_selector"`
	ID                  int64          `json:"id"`
}

func (q *Queries) UpdateFeed(ctx context.Context, arg UpdateFeedParams) error {
	_, err := q.db.ExecContext(ctx, updateFeed,
		arg.Name,
		arg.Url,
		arg.ItemSelector,
		arg.TitleSelector,
		arg.LinkSelector,
		arg.DescriptionSelector,
		arg.ID,
	)
	return err
}

const updateFeedLastRefreshedAt = `-- name: UpdateFeedLastRefreshedAt :exec
UPDATE feeds
SET last_refreshed_at = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateFeedLastRefreshedAtParams struct {
	LastRefreshedAt sql.NullTime `json:"last_refreshed_at"`
	ID              int64        `json:"id"`
}

func (q *Queries) UpdateFeedLastRefreshedAt(ctx context.Context, arg UpdateFeedLastRefreshedAtParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedLastRefreshedAt, arg.LastRefreshedAt, arg.ID)
	return err
}
